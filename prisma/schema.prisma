generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Add this line to specify the seed command
seed = "node prisma/seed.js"

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole
  department    String?
  year          Int?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  eventsCreated Event[]   @relation("CreatedEvents")
  registrations Registration[]
  feedbacks     Feedback[]
  notifications Notification[]
}

enum UserRole {
  ADMIN
  STUDENT
  EVENT_ORGANIZER
  
}

model Event {
  id                  String         @id @default(cuid())
  title               String
  description         String
  date                DateTime
  startTime           String
  endTime             String?
  location            String
  venue               String?
  category            String
  department          String?
  tags                String?        @db.Text
  images              String?        @db.Text
  contactEmail        String?
  contactPhone        String?

  eventType           EventType      @default(IN_PERSON)
  isPublic            Boolean        @default(true)
  requiresApproval    Boolean        @default(false)
  allowFeedback       Boolean        @default(true)
  organizerInfo       Boolean        @default(true)
  featured            Boolean        @default(false)

  capacity            Int
  registrationDeadline DateTime?
  approvalStatus      ApprovalStatus @default(PENDING)

  createdById         String
  createdBy           User           @relation("CreatedEvents", fields: [createdById], references: [id])

  registrations       Registration[]
  feedbacks           Feedback[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

enum EventType {
  IN_PERSON
  ONLINE
  HYBRID
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Registration {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  status    RegistrationStatus @default(PENDING)

  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, userId])
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
}

model Feedback {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  rating    Int
  comment   String
  email     String?
  wasHelpful Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum NotificationType {
  EVENT_CREATED
  EVENT_UPDATED
  REGISTRATION_STATUS
  SYSTEM
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  read      Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id])

  @@index([userId])
}
